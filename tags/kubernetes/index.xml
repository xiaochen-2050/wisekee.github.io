<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Xiao.chen</title>
    <link>https://blog.wisekee.com/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Xiao.chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2020, Xiao.chen; all rights reserved.</copyright>
    <lastBuildDate>Sun, 25 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.wisekee.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Solve the problem of Metrics - Server</title>
      <link>https://blog.wisekee.com/post/k8s-metrics-server/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/k8s-metrics-server/</guid>
      <description>When we repeatedly install the Metrics-Server, because we use helm to install it, deleting one of them will cause the following error when executing the command related to kubectl top nodes:  Error from server (NotFound): the server could not find the requested resource (get services http:heapster:)
  A large part of this is due to the removal of the Apiservice Resources from Metics, when you execute the following command to ensure that the Apiservice exists  kubectl get apiservice | grep metrics   v1beta1.</description>
    </item>
    
    <item>
      <title>Notes for using Kubernetes Ingress Controller</title>
      <link>https://blog.wisekee.com/post/kubernetes-ingress-guides/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/kubernetes-ingress-guides/</guid>
      <description>Using Nginx-Ingress Controller in AWS Eks environment  Need manually enable the Proxy protocol V2 in NLB target group just only TCP https 443 listener Rather than TCP http 80 listener Multiple SSL certificate need manually add to NLB The http redirect to https, need to change some paramets  1# use http-snippet and open proxy protocol2use-proxy-protocol:&amp;#39;true&amp;#39;3use-forwarded-headers:&amp;#39;true&amp;#39;4server-tokens:&amp;#39;false&amp;#39;5http-snippet:| 6server {7listen8000;8return308https://$host$request_uri;9}10proxy-real-ip-cidr:${join(&amp;#34;,&amp;#34;,var.internal_cidr)}11# Add special port in controller container12set{13type=&amp;#34;string&amp;#34;14name=&amp;#34;controller.containerPort.special&amp;#34;15value=&amp;#34;8000&amp;#34;16}17# Let https redirect to http port and http port redirect to special port , the special port listener in `http-snippet` section18set{19type=&amp;#34;string&amp;#34;20name=&amp;#34;controller.</description>
    </item>
    
    <item>
      <title>Backup and Restore kubernetes cluster using Velero</title>
      <link>https://blog.wisekee.com/post/k8s-backup-restore-using-velero/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/k8s-backup-restore-using-velero/</guid>
      <description>Installing or Upgrade Velero client on Mac OS:
1	brew install velero 2	HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade velero #upgrade to the latest version if maybe The Velero should use object store save the snapshot. so we use Minio as kubernetes object store.Minio launched as part of docker-compose.yaml
1minio:2container_name:&amp;#34;minio&amp;#34;3image:minio/minio4command:&amp;#34;server /data&amp;#34;5ports:6- &amp;#34;9000:9000&amp;#34;7environment:8MINIO_ACCESS_KEY:“xxxxxxx”9MINIO_SECRET_KEY:“xxxxxxx”10volumes:11- &amp;#34;./minio/data:/data&amp;#34;12networks:13- easy-mockCreate a env file is named: velero-env. because the Velero need the similar aws credentials access to Minio service storage backup object.</description>
    </item>
    
    <item>
      <title>Custom private domain name in kubernetes cluster</title>
      <link>https://blog.wisekee.com/post/custom-domain-name-in-k8s/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/custom-domain-name-in-k8s/</guid>
      <description>We use default service domain name ${servicename}.${namespace}.svc.cluster.localin kubernetes cluster, however the custom private domain name in private k8s networks frequently used. we can use coredns component reparse the private domain name to default CNAME.
change coredns configmap add custom domain name config to yaml kubectl edit cm coredns -n kube-system
1data:2Corefile:| 3.:53 {4errors5health{6lameduck5s7}8ready9kubernetescluster.localin-addr.arpaip6.arpa{10podsinsecure11fallthroughin-addr.arpaip6.arpa12ttl3013}14file/etc/coredns/uat-env.dbuat-env.com15prometheus:915316forward./etc/resolv.conf17cache3018loop19reload20loadbalance21}22uat-env.db:&amp;gt;- 23uat-env.com. IN SOA ns.dns.cluster.local. 24hostmaster.cluster.local.15923622027200180086400302526uat-env.com.INNS27kube-dns.kube-system.svc.cluster.local.2829db.uat-env.com.INCNAME30mysql.db.svc.cluster.local.3132private-services.uat-env.com.INCNAME33internal-gateway.default.svc.cluster.local.add file /etc/coredns/uat-env.db uat-env.com line to Corefile section add new section uat-env.db and add relative recordset</description>
    </item>
    
    <item>
      <title>kubernetes operations command summary</title>
      <link>https://blog.wisekee.com/post/k8s-common-command-conclusion/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/k8s-common-command-conclusion/</guid>
      <description>When we use the Kubernetes platform,has many commands is important:
 The k command is alias to kubectl
   force delete pod, sometimes the pod still terminating.
k delete pods &amp;lt;pod&amp;gt; -n &amp;lt;namespace&amp;gt; --grace-period=0 --force
  get all resource in current kubernetes cluster
k get all --all-namespaces
  view job logs
k logs $(k get pods --selector=job-name=job-1598792400 --output=jsonpath={.items[*].metadata.name})
  taint the master nodes no execute and no schedult</description>
    </item>
    
    <item>
      <title>Automatic generate kubernetes custom resources api go language code</title>
      <link>https://blog.wisekee.com/post/generate-crds-api-k8s/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/generate-crds-api-k8s/</guid>
      <description>Why does this article exist because when we use Kubesphere. the go client code need to use the client objects of K8s but dosen&amp;rsquo;t provider the s2ibinary object client code. https://github.com/kubesphere/s2ioperator/tree/master/pkg/client/clientset/versioned/typed/devops/v1alpha1
  Prepare directory structure and resource defination files    The doc.go include content:  1// +k8s:deepcopy-gen=package,register 2// +k8s:defaulter-gen=TypeMeta 3// +groupName=devops.kubesphere.io 4package v1alpha1  The register.go main defination custom resources GroupName and GroupVersion  1package v1alpha1 2 3import ( 4 &amp;#34;k8s.</description>
    </item>
    
    <item>
      <title>Install and setup cloud foundry in kubernetes cluster</title>
      <link>https://blog.wisekee.com/post/setup-cloudfoundry-in-k8s/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/setup-cloudfoundry-in-k8s/</guid>
      <description>First prepare the tools installation in host:  Kind: https://kind.sigs.k8s.io/docs/user/quick-start/ Cf command: https://docs.cloudfoundry.org/cf-cli/install-go-cli.html  HOMEBREW_NO_AUTO_UPDATE=1 brew install cloudfoundry/tap/cf-cli@6 or HOMEBREW_NO_AUTO_UPDATE=1 brew install cloudfoundry/tap/cf-cli@7   Kubectl command: https://kubernetes.io/docs/tasks/tools/install-kubectl/ Helm: https://helm.sh/docs/intro/install/  The Kind must definiation config.yml, refer to expose http(80) and https(443) ports to host machine, because the k8s cluster node ip is internal-ip created by Kind such as: 172.18.0.2
1kind:Cluster2apiVersion:kind.x-k8s.io/v1alpha43networking:4# WARNING: It is _strongly_ recommended that you keep this the default5# (127.</description>
    </item>
    
  </channel>
</rss>